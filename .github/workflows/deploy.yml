name: Deploy Full Stack Business Platform

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: codeanyatisone-cmyk/business_platform

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: business-platform/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd fastapi-backend
        pip install --upgrade pip
        pip install -e .

    - name: Build Frontend
      run: |
        cd business-platform
        npm ci
        npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./fastapi-backend
        file: ./fastapi-backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./business-platform
        file: ./business-platform/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy Full Stack to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e  # Exit on any error
          
          echo "üöÄ Starting full-stack deployment process..."
          
          # Navigate to project directory
          cd /opt/business-project
          echo "üìÅ Current directory: $(pwd)"
          
          # Pull latest changes
          echo "üì• Pulling latest changes from Git..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          # Update docker-compose.yml with new image tags
          echo "üê≥ Updating Docker Compose configuration..."
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
          
          # Create production docker-compose.yml
          cat > docker-compose.prod.yml << EOF
          version: '3.8'

          services:
            postgres:
              image: postgres:13-alpine
              container_name: bp-postgres
              restart: unless-stopped
              environment:
                POSTGRES_DB: business_platform
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: \${POSTGRES_PASSWORD:-secure_password_change_me}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - business-platform-network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 5s
                timeout: 5s
                retries: 5

            backend:
              image: \$BACKEND_IMAGE
              container_name: bp-backend
              restart: unless-stopped
              environment:
                - DATABASE_URL=postgresql://postgres:\${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/business_platform
                - DATABASE_URL_ASYNC=postgresql+asyncpg://postgres:\${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/business_platform
                - SECRET_KEY=\${SECRET_KEY:-your-secret-key-change-in-production}
                - ACCESS_TOKEN_EXPIRE_MINUTES=\${ACCESS_TOKEN_EXPIRE_MINUTES:-120}
                - ENVIRONMENT=production
                - DEBUG=False
                - ALLOWED_HOSTS=v4.business,www.v4.business,localhost
                - TRUSTED_HOSTS=v4.business,www.v4.business,localhost
              depends_on:
                postgres:
                  condition: service_healthy
              networks:
                - business-platform-network
              ports:
                - "3001:3001"

            frontend:
              image: \$FRONTEND_IMAGE
              container_name: bp-frontend
              restart: unless-stopped
              environment:
                - NODE_ENV=production
              depends_on:
                backend:
                  condition: service_started
              networks:
                - business-platform-network
              ports:
                - "3000:80"

          volumes:
            postgres_data:

          networks:
            business-platform-network:
              driver: bridge
          EOF
          
          # Pull latest images
          echo "üì• Pulling latest Docker images..."
          docker pull \$BACKEND_IMAGE
          docker pull \$FRONTEND_IMAGE
          
          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker compose -f docker-compose.prod.yml down || true
          
          # Start with new images
          echo "üöÄ Starting containers with new images..."
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Verify deployment
          echo "üß™ Verifying deployment..."
          
          # Check if containers are running
          if ! docker ps | grep -q "bp-backend"; then
            echo "‚ùå Backend container not running!"
            docker logs bp-backend
            exit 1
          fi
          
          if ! docker ps | grep -q "bp-frontend"; then
            echo "‚ùå Frontend container not running!"
            docker logs bp-frontend
            exit 1
          fi
          
          # Test backend health
          if curl -f -s http://localhost:3001/health > /dev/null; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ö†Ô∏è  Backend health check failed"
          fi
          
          # Test frontend
          if curl -f -s http://localhost:3000 > /dev/null; then
            echo "‚úÖ Frontend responding"
          else
            echo "‚ùå Frontend not responding"
            exit 1
          fi
          
          # Test domain
          if curl -f -s http://v4.business > /dev/null; then
            echo "‚úÖ Domain responding"
          else
            echo "‚ö†Ô∏è  Domain not responding (may be DNS/cache issue)"
          fi
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          # Show deployment info
          echo "üìä Full Stack Deployment Summary:"
          echo "  - Git commit: $(git rev-parse HEAD)"
          echo "  - Backend image: \$BACKEND_IMAGE"
          echo "  - Frontend image: \$FRONTEND_IMAGE"
          echo "  - Deployment time: $(date)"
          echo "  - Backend URL: http://localhost:3001"
          echo "  - Frontend URL: http://localhost:3000"
          echo "  - Domain: http://v4.business"
          
          echo "üéâ Full stack deployment completed successfully!"