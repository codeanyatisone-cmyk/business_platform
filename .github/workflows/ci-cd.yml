name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd business-platform
        npm ci

    - name: Run tests
      run: |
        cd business-platform
        npm test -- --coverage --watchAll=false

    - name: Build application
      run: |
        cd business-platform
        npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./business-platform
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd /opt/business-platform-frontend
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop existing containers
          docker-compose down || true
          
          # Update docker-compose.yml with new image
          sed -i 's|build:|# build:|' docker-compose.yml
          sed -i 's|context: .|# context: .|' docker-compose.yml
          sed -i 's|dockerfile: Dockerfile|# dockerfile: Dockerfile|' docker-compose.yml
          echo "    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> docker-compose.yml
          
          # Start new containers
          docker-compose up -d
          
          # Show status
          docker-compose ps

  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1
