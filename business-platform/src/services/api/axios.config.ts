import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { API_CONFIG } from '../../config/api.config';

// –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π axios instance
export const api = axios.create({
  baseURL: API_CONFIG.baseURL,
  timeout: API_CONFIG.timeout,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  withCredentials: API_CONFIG.withCredentials,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è retry –∑–∞–ø—Ä–æ—Å–æ–≤
const retryRequest = async (config: AxiosRequestConfig, retryCount = 0): Promise<AxiosResponse> => {
  try {
    return await api(config);
  } catch (error) {
    if (retryCount < API_CONFIG.retryAttempts && shouldRetry(error as AxiosError)) {
      console.log(`üîÑ Retrying request (${retryCount + 1}/${API_CONFIG.retryAttempts})`);
      await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1))); // Exponential backoff
      return retryRequest(config, retryCount + 1);
    }
    throw error;
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
const shouldRetry = (error: AxiosError): boolean => {
  if (!error.response) return true; // Network error
  const status = error.response.status;
  return status >= 500 || status === 408 || status === 429; // Server errors, timeout, rate limit
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if (config.method === 'get') {
      config.params = {
        ...config.params,
        _t: Date.now()
      };
    }
    
    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    return response;
  },
  async (error: AxiosError) => {
    console.error('‚ùå API Error:', {
      status: error.response?.status,
      message: error.message,
      url: error.config?.url,
      method: error.config?.method
    });

    if (error.response?.status === 401) {
      // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ - –æ—á–∏—â–∞–µ–º localStorage –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      localStorage.removeItem('user');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
      if (!window.location.pathname.includes('/login')) {
        window.location.href = '/login';
      }
    } else if (error.response?.status === 403) {
      // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
      console.error('üö´ Access denied');
    } else if (error.response && error.response.status >= 500) {
      // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞
      console.error('üî• Server error');
    } else if (!error.response) {
      // –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
      console.error('üåê Network error - check your connection');
    }

    return Promise.reject(error);
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è retry
export { retryRequest };

